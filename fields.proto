// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

syntax = "proto3";

package goproto.protoc.proto3;

option go_package = "./proto3";

message FieldTestMessage {
  bool optional_bool = 1;
  Enum optional_enum = 2;
  int32 optional_int32 = 3;
  sint32 optional_sint32 = 4;
  uint32 optional_uint32 = 5;
  int64 optional_int64 = 6;
  sint64 optional_sint64 = 7;
  uint64 optional_uint64 = 8;
  sfixed32 optional_sfixed32 = 9;
  fixed32 optional_fixed32 = 10;
  float optional_float = 11;
  sfixed64 optional_sfixed64 = 12;
  fixed64 optional_fixed64 = 13;
  double optional_double = 14;
  string optional_string = 15;
  bytes optional_bytes = 16;
  Message optional_message = 17;
  Message2 optional_message2 = 18;

  repeated bool repeated_bool = 201[packed=true];
  repeated Enum repeated_enum = 202[packed=true];
  repeated int32 repeated_int32 = 203[packed=true];
  repeated sint32 repeated_sint32 = 204[packed=true];
  repeated uint32 repeated_uint32 = 205[packed=true];
  repeated int64 repeated_int64 = 206[packed=true];
  repeated sint64 repeated_sint64 = 207[packed=true];
  repeated uint64 repeated_uint64 = 208[packed=true];
  repeated sfixed32 repeated_sfixed32 = 209[packed=true];
  repeated fixed32 repeated_fixed32 = 210[packed=true];
  repeated float repeated_float = 211[packed=true];
  repeated sfixed64 repeated_sfixed64 = 212[packed=true];
  repeated fixed64 repeated_fixed64 = 213[packed=true];
  repeated double repeated_double = 214[packed=true];
  repeated string repeated_string = 215;
  repeated bytes repeated_bytes = 216;
  repeated Message repeated_message = 217;
  repeated Message2 repeated_message2 = 218;

  repeated bool nopack_bool = 31[packed=false];
  repeated Enum nopack_enum = 32[packed=false];
  repeated int32 nopack_int32 = 33[packed=false];
  repeated sint32 nopack_sint32 = 34[packed=false];
  repeated uint32 nopack_uint32 = 35[packed=false];
  repeated int64 nopack_int64 = 36[packed=false];
  repeated sint64 nopack_sint64 = 37[packed=false];
  repeated uint64 nopack_uint64 = 38[packed=false];
  repeated sfixed32 nopack_sfixed32 = 39[packed=false];
  repeated fixed32 nopack_fixed32 = 40[packed=false];
  repeated float nopack_float = 41[packed=false];
  repeated sfixed64 nopack_sfixed64 = 42[packed=false];
  repeated fixed64 nopack_fixed64 = 43[packed=false];
  repeated double nopack_double = 44[packed=false];
  repeated string nopack_string = 45[packed=false];
  repeated bytes nopack_bytes = 46[packed=false];
  repeated Message nopack_message = 47[packed=false];
  repeated Message2 nopack_message2 = 48[packed=false];


  map<int32, bool> map_bool = 51;
  map<int32, Enum> map_enum = 52;
  map<int32, int32> map_int32 = 53;
    //map<sint32, sint32> map_sint32 = 54;
  map<uint32, uint32> map_uint32 = 55;
  map<int64, int64> map_int64 = 56;
    //map<sint64, sint64> map_sint64 = 57;
  map<uint64, uint64> map_uint64 = 58;
    //map<sfixed32, sfixed32> map_sfixed32 = 59;
    //map<fixed32, fixed32> map_fixed32 = 60;
  map<int32, float> map_float = 61;
    //map<int32, sfixed64> map_sfixed64 = 62;
    //map<int32, fixed64> map_fixed64 = 63;
  map<int32, double> map_double = 64;
  map<int32, string> map_string = 65;
  map<int32, bytes> map_bytes = 66;
  map<int32, Message> map_message = 67;
  map<int32, Message2> map_message2 = 68;

 //  map<bool,int32> map_key_bool = 401;
  //map<Enum,int32> map_key_enum = 402;
  map<int32,int32> map_key_int32 = 73;
    ///map<sint32,int32> map_key_sint32 = 404;
  map<uint32,int32> map_key_uint32 = 75;
  map<int64,int32> map_key_int64 = 76;
    ///map<sint64,int32> map_key_sint64 = 407;
  map<uint64,int32> map_key_uint64 = 78;
    ///map<sfixed32,int32> map_key_sfixed32 = 409;
    ///map<fixed32,int32> map_key_fixed32 = 410;
  //map<float,int32> map_key_float = 411;
  ///map<sfixed64,int32> map_key_sfixed64 = 412;
    ///map<fixed64,int32> map_key_fixed64 = 413;
  //map<double,int32> map_key_double = 414;
  map<string,int32> map_key_string = 85;
  //map<bytes,int32> map_key_bytes = 416;
  //map<Message,int32> map_key_Message = 417;
  //map<Message2,int32> map_key_Message2 = 418;

  map<int32, int64> map_int32_int64 = 90;
  map<string, Message> map_string_message = 91;
  map<string, Message2> map_string_message2 = 92;
    ///map<fixed64, Enum> map_fixed64_enum = 503;



  enum Enum {
    ZERO = 0;
    ONE = 1;
    TWO = 2;
  }

  message Message {}

  message Message2 {
    bool bv = 1;
    Enum ev = 2;
  }
}

enum Enum {
  ZERO = 0;
  ONE = 1;
  TWO = 2;
}

message Example {
    int32 filed = 1;
}
