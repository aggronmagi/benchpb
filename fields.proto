// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

syntax = "proto3";

package goproto.protoc.proto3;

option go_package = "./proto3";

message FieldTestMessage {
  bool optional_bool = 1;
  Enum optional_enum = 2;
  int32 optional_int32 = 3;
  sint32 optional_sint32 = 4;
  uint32 optional_uint32 = 5;
  int64 optional_int64 = 6;
  sint64 optional_sint64 = 7;
  uint64 optional_uint64 = 8;
  sfixed32 optional_sfixed32 = 9;
  fixed32 optional_fixed32 = 10;
  float optional_float = 11;
  sfixed64 optional_sfixed64 = 12;
  fixed64 optional_fixed64 = 13;
  double optional_double = 14;
  string optional_string = 15;
  bytes optional_bytes = 16;
  Message optional_Message = 17;
  Message2 optional_Message2 = 18;

  repeated bool repeated_bool = 201;
  repeated Enum repeated_enum = 202;
  repeated int32 repeated_int32 = 203;
  repeated sint32 repeated_sint32 = 204;
  repeated uint32 repeated_uint32 = 205;
  repeated int64 repeated_int64 = 206;
  repeated sint64 repeated_sint64 = 207;
  repeated uint64 repeated_uint64 = 208;
  repeated sfixed32 repeated_sfixed32 = 209;
  repeated fixed32 repeated_fixed32 = 210;
  repeated float repeated_float = 211;
  repeated sfixed64 repeated_sfixed64 = 212;
  repeated fixed64 repeated_fixed64 = 213;
  repeated double repeated_double = 214;
  repeated string repeated_string = 215;
  repeated bytes repeated_bytes = 216;
  repeated Message repeated_Message = 217;
  repeated Message2 repeated_Message2 = 218;

  map<int32, bool> map_bool = 301;
  map<int32, Enum> map_enum = 302;
  map<int32, int32> map_int32 = 303;
  map<sint32, sint32> map_sint32 = 304;
  map<uint32, uint32> map_uint32 = 305;
  map<int64, int64> map_int64 = 306;
  map<sint64, sint64> map_sint64 = 307;
  map<uint64, uint64> map_uint64 = 308;
  map<sfixed32, sfixed32> map_sfixed32 = 309;
  map<fixed32, fixed32> map_fixed32 = 310;
  map<int32, float> map_float = 311;
  map<int32, sfixed64> map_sfixed64 = 312;
  map<int32, fixed64> map_fixed64 = 313;
  map<int32, double> map_double = 314;
  map<int32, string> map_string = 315;
  map<int32, bytes> map_bytes = 316;
  map<int32, Message> map_Message = 317;
  map<int32, Message2> map_Message2 = 318;

 //  map<bool,int32> map_key_bool = 401;
  //map<Enum,int32> map_key_enum = 402;
  map<int32,int32> map_key_int32 = 403;
  map<sint32,int32> map_key_sint32 = 404;
  map<uint32,int32> map_key_uint32 = 405;
  map<int64,int32> map_key_int64 = 406;
  map<sint64,int32> map_key_sint64 = 407;
  map<uint64,int32> map_key_uint64 = 408;
  map<sfixed32,int32> map_key_sfixed32 = 409;
  map<fixed32,int32> map_key_fixed32 = 410;
  //map<float,int32> map_key_float = 411;
  map<sfixed64,int32> map_key_sfixed64 = 412;
  map<fixed64,int32> map_key_fixed64 = 413;
  //map<double,int32> map_key_double = 414;
  map<string,int32> map_key_string = 415;
  //map<bytes,int32> map_key_bytes = 416;
  //map<Message,int32> map_key_Message = 417;
  //map<Message2,int32> map_key_Message2 = 418;

  map<int32, int64> map_int32_int64 = 500;
  map<string, Message> map_string_message = 501;
  map<string, Message2> map_string_message2 = 502;
  map<fixed64, Enum> map_fixed64_enum = 503;



  enum Enum {
    ZERO = 0;
    ONE = 1;
    TWO = 2;
  }

  message Message {}

  message Message2 {
    bool bool = 1;
    Enum enum = 2;
  }
}

enum Enum {
  ZERO = 0;
  ONE = 1;
  TWO = 2;
}