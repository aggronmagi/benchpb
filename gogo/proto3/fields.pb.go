// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fields.proto

package proto3

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Enum int32

const (
	Enum_ZERO Enum = 0
	Enum_ONE  Enum = 1
	Enum_TWO  Enum = 2
)

var Enum_name = map[int32]string{
	0: "ZERO",
	1: "ONE",
	2: "TWO",
}

var Enum_value = map[string]int32{
	"ZERO": 0,
	"ONE":  1,
	"TWO":  2,
}

func (x Enum) String() string {
	return proto.EnumName(Enum_name, int32(x))
}

func (Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d39ad626ec0e575e, []int{0}
}

type FieldTestMessage_Enum int32

const (
	FieldTestMessage_ZERO FieldTestMessage_Enum = 0
	FieldTestMessage_ONE  FieldTestMessage_Enum = 1
	FieldTestMessage_TWO  FieldTestMessage_Enum = 2
)

var FieldTestMessage_Enum_name = map[int32]string{
	0: "ZERO",
	1: "ONE",
	2: "TWO",
}

var FieldTestMessage_Enum_value = map[string]int32{
	"ZERO": 0,
	"ONE":  1,
	"TWO":  2,
}

func (x FieldTestMessage_Enum) String() string {
	return proto.EnumName(FieldTestMessage_Enum_name, int32(x))
}

func (FieldTestMessage_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d39ad626ec0e575e, []int{0, 0}
}

type FieldTestMessage struct {
	OptionalBool      bool                                 `protobuf:"varint,1,opt,name=optional_bool,json=optionalBool,proto3" json:"optional_bool,omitempty"`
	OptionalEnum      FieldTestMessage_Enum                `protobuf:"varint,2,opt,name=optional_enum,json=optionalEnum,proto3,enum=goproto.protoc.proto3.FieldTestMessage_Enum" json:"optional_enum,omitempty"`
	OptionalInt32     int32                                `protobuf:"varint,3,opt,name=optional_int32,json=optionalInt32,proto3" json:"optional_int32,omitempty"`
	OptionalSint32    int32                                `protobuf:"zigzag32,4,opt,name=optional_sint32,json=optionalSint32,proto3" json:"optional_sint32,omitempty"`
	OptionalUint32    uint32                               `protobuf:"varint,5,opt,name=optional_uint32,json=optionalUint32,proto3" json:"optional_uint32,omitempty"`
	OptionalInt64     int64                                `protobuf:"varint,6,opt,name=optional_int64,json=optionalInt64,proto3" json:"optional_int64,omitempty"`
	OptionalSint64    int64                                `protobuf:"zigzag64,7,opt,name=optional_sint64,json=optionalSint64,proto3" json:"optional_sint64,omitempty"`
	OptionalUint64    uint64                               `protobuf:"varint,8,opt,name=optional_uint64,json=optionalUint64,proto3" json:"optional_uint64,omitempty"`
	OptionalSfixed32  int32                                `protobuf:"fixed32,9,opt,name=optional_sfixed32,json=optionalSfixed32,proto3" json:"optional_sfixed32,omitempty"`
	OptionalFixed32   uint32                               `protobuf:"fixed32,10,opt,name=optional_fixed32,json=optionalFixed32,proto3" json:"optional_fixed32,omitempty"`
	OptionalFloat     float32                              `protobuf:"fixed32,11,opt,name=optional_float,json=optionalFloat,proto3" json:"optional_float,omitempty"`
	OptionalSfixed64  int64                                `protobuf:"fixed64,12,opt,name=optional_sfixed64,json=optionalSfixed64,proto3" json:"optional_sfixed64,omitempty"`
	OptionalFixed64   uint64                               `protobuf:"fixed64,13,opt,name=optional_fixed64,json=optionalFixed64,proto3" json:"optional_fixed64,omitempty"`
	OptionalDouble    float64                              `protobuf:"fixed64,14,opt,name=optional_double,json=optionalDouble,proto3" json:"optional_double,omitempty"`
	OptionalString    string                               `protobuf:"bytes,15,opt,name=optional_string,json=optionalString,proto3" json:"optional_string,omitempty"`
	OptionalBytes     []byte                               `protobuf:"bytes,16,opt,name=optional_bytes,json=optionalBytes,proto3" json:"optional_bytes,omitempty"`
	Optional_Message  *FieldTestMessage_Message            `protobuf:"bytes,17,opt,name=optional_Message,json=optionalMessage,proto3" json:"optional_Message,omitempty"`
	Optional_Message2 *FieldTestMessage_Message2           `protobuf:"bytes,18,opt,name=optional_Message2,json=optionalMessage2,proto3" json:"optional_Message2,omitempty"`
	RepeatedBool      []bool                               `protobuf:"varint,201,rep,packed,name=repeated_bool,json=repeatedBool,proto3" json:"repeated_bool,omitempty"`
	RepeatedEnum      []FieldTestMessage_Enum              `protobuf:"varint,202,rep,packed,name=repeated_enum,json=repeatedEnum,proto3,enum=goproto.protoc.proto3.FieldTestMessage_Enum" json:"repeated_enum,omitempty"`
	RepeatedInt32     []int32                              `protobuf:"varint,203,rep,packed,name=repeated_int32,json=repeatedInt32,proto3" json:"repeated_int32,omitempty"`
	RepeatedSint32    []int32                              `protobuf:"zigzag32,204,rep,packed,name=repeated_sint32,json=repeatedSint32,proto3" json:"repeated_sint32,omitempty"`
	RepeatedUint32    []uint32                             `protobuf:"varint,205,rep,packed,name=repeated_uint32,json=repeatedUint32,proto3" json:"repeated_uint32,omitempty"`
	RepeatedInt64     []int64                              `protobuf:"varint,206,rep,packed,name=repeated_int64,json=repeatedInt64,proto3" json:"repeated_int64,omitempty"`
	RepeatedSint64    []int64                              `protobuf:"zigzag64,207,rep,packed,name=repeated_sint64,json=repeatedSint64,proto3" json:"repeated_sint64,omitempty"`
	RepeatedUint64    []uint64                             `protobuf:"varint,208,rep,packed,name=repeated_uint64,json=repeatedUint64,proto3" json:"repeated_uint64,omitempty"`
	RepeatedSfixed32  []int32                              `protobuf:"fixed32,209,rep,packed,name=repeated_sfixed32,json=repeatedSfixed32,proto3" json:"repeated_sfixed32,omitempty"`
	RepeatedFixed32   []uint32                             `protobuf:"fixed32,210,rep,packed,name=repeated_fixed32,json=repeatedFixed32,proto3" json:"repeated_fixed32,omitempty"`
	RepeatedFloat     []float32                            `protobuf:"fixed32,211,rep,packed,name=repeated_float,json=repeatedFloat,proto3" json:"repeated_float,omitempty"`
	RepeatedSfixed64  []int64                              `protobuf:"fixed64,212,rep,packed,name=repeated_sfixed64,json=repeatedSfixed64,proto3" json:"repeated_sfixed64,omitempty"`
	RepeatedFixed64   []uint64                             `protobuf:"fixed64,213,rep,packed,name=repeated_fixed64,json=repeatedFixed64,proto3" json:"repeated_fixed64,omitempty"`
	RepeatedDouble    []float64                            `protobuf:"fixed64,214,rep,packed,name=repeated_double,json=repeatedDouble,proto3" json:"repeated_double,omitempty"`
	RepeatedString    []string                             `protobuf:"bytes,215,rep,name=repeated_string,json=repeatedString,proto3" json:"repeated_string,omitempty"`
	RepeatedBytes     [][]byte                             `protobuf:"bytes,216,rep,name=repeated_bytes,json=repeatedBytes,proto3" json:"repeated_bytes,omitempty"`
	Repeated_Message  []*FieldTestMessage_Message          `protobuf:"bytes,217,rep,name=repeated_Message,json=repeatedMessage,proto3" json:"repeated_Message,omitempty"`
	Repeated_Message2 []*FieldTestMessage_Message2         `protobuf:"bytes,218,rep,name=repeated_Message2,json=repeatedMessage2,proto3" json:"repeated_Message2,omitempty"`
	MapBool           map[int32]bool                       `protobuf:"bytes,301,rep,name=map_bool,json=mapBool,proto3" json:"map_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapEnum           map[int32]FieldTestMessage_Enum      `protobuf:"bytes,302,rep,name=map_enum,json=mapEnum,proto3" json:"map_enum,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=goproto.protoc.proto3.FieldTestMessage_Enum"`
	MapInt32          map[int32]int32                      `protobuf:"bytes,303,rep,name=map_int32,json=mapInt32,proto3" json:"map_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSint32         map[int32]int32                      `protobuf:"bytes,304,rep,name=map_sint32,json=mapSint32,proto3" json:"map_sint32,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapUint32         map[uint32]uint32                    `protobuf:"bytes,305,rep,name=map_uint32,json=mapUint32,proto3" json:"map_uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt64          map[int64]int64                      `protobuf:"bytes,306,rep,name=map_int64,json=mapInt64,proto3" json:"map_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSint64         map[int64]int64                      `protobuf:"bytes,307,rep,name=map_sint64,json=mapSint64,proto3" json:"map_sint64,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapUint64         map[uint64]uint64                    `protobuf:"bytes,308,rep,name=map_uint64,json=mapUint64,proto3" json:"map_uint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSfixed32       map[int32]int32                      `protobuf:"bytes,309,rep,name=map_sfixed32,json=mapSfixed32,proto3" json:"map_sfixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapFixed32        map[uint32]uint32                    `protobuf:"bytes,310,rep,name=map_fixed32,json=mapFixed32,proto3" json:"map_fixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapFloat          map[int32]float32                    `protobuf:"bytes,311,rep,name=map_float,json=mapFloat,proto3" json:"map_float,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapSfixed64       map[int32]int64                      `protobuf:"bytes,312,rep,name=map_sfixed64,json=mapSfixed64,proto3" json:"map_sfixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapFixed64        map[int32]uint64                     `protobuf:"bytes,313,rep,name=map_fixed64,json=mapFixed64,proto3" json:"map_fixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapDouble         map[int32]float64                    `protobuf:"bytes,314,rep,name=map_double,json=mapDouble,proto3" json:"map_double,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapString         map[int32]string                     `protobuf:"bytes,315,rep,name=map_string,json=mapString,proto3" json:"map_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapBytes          map[int32][]byte                     `protobuf:"bytes,316,rep,name=map_bytes,json=mapBytes,proto3" json:"map_bytes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map_Message       map[int32]*FieldTestMessage_Message  `protobuf:"bytes,317,rep,name=map_Message,json=mapMessage,proto3" json:"map_Message,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map_Message2      map[int32]*FieldTestMessage_Message2 `protobuf:"bytes,318,rep,name=map_Message2,json=mapMessage2,proto3" json:"map_Message2,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//	map<bool,int32> map_key_bool = 401;
	//
	// map<Enum,int32> map_key_enum = 402;
	MapKeyInt32    map[int32]int32  `protobuf:"bytes,403,rep,name=map_key_int32,json=mapKeyInt32,proto3" json:"map_key_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapKeySint32   map[int32]int32  `protobuf:"bytes,404,rep,name=map_key_sint32,json=mapKeySint32,proto3" json:"map_key_sint32,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapKeyUint32   map[uint32]int32 `protobuf:"bytes,405,rep,name=map_key_uint32,json=mapKeyUint32,proto3" json:"map_key_uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapKeyInt64    map[int64]int32  `protobuf:"bytes,406,rep,name=map_key_int64,json=mapKeyInt64,proto3" json:"map_key_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapKeySint64   map[int64]int32  `protobuf:"bytes,407,rep,name=map_key_sint64,json=mapKeySint64,proto3" json:"map_key_sint64,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapKeyUint64   map[uint64]int32 `protobuf:"bytes,408,rep,name=map_key_uint64,json=mapKeyUint64,proto3" json:"map_key_uint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapKeySfixed32 map[int32]int32  `protobuf:"bytes,409,rep,name=map_key_sfixed32,json=mapKeySfixed32,proto3" json:"map_key_sfixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapKeyFixed32  map[uint32]int32 `protobuf:"bytes,410,rep,name=map_key_fixed32,json=mapKeyFixed32,proto3" json:"map_key_fixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// map<float,int32> map_key_float = 411;
	MapKeySfixed64 map[int64]int32  `protobuf:"bytes,412,rep,name=map_key_sfixed64,json=mapKeySfixed64,proto3" json:"map_key_sfixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapKeyFixed64  map[uint64]int32 `protobuf:"bytes,413,rep,name=map_key_fixed64,json=mapKeyFixed64,proto3" json:"map_key_fixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// map<double,int32> map_key_double = 414;
	MapKeyString         map[string]int32                      `protobuf:"bytes,415,rep,name=map_key_string,json=mapKeyString,proto3" json:"map_key_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Int64        map[int32]int64                       `protobuf:"bytes,500,rep,name=map_int32_int64,json=mapInt32Int64,proto3" json:"map_int32_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringMessage     map[string]*FieldTestMessage_Message  `protobuf:"bytes,501,rep,name=map_string_message,json=mapStringMessage,proto3" json:"map_string_message,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringMessage2    map[string]*FieldTestMessage_Message2 `protobuf:"bytes,502,rep,name=map_string_message2,json=mapStringMessage2,proto3" json:"map_string_message2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapFixed64Enum       map[uint64]FieldTestMessage_Enum      `protobuf:"bytes,503,rep,name=map_fixed64_enum,json=mapFixed64Enum,proto3" json:"map_fixed64_enum,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=goproto.protoc.proto3.FieldTestMessage_Enum"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *FieldTestMessage) Reset()         { *m = FieldTestMessage{} }
func (m *FieldTestMessage) String() string { return proto.CompactTextString(m) }
func (*FieldTestMessage) ProtoMessage()    {}
func (*FieldTestMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d39ad626ec0e575e, []int{0}
}
func (m *FieldTestMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldTestMessage.Unmarshal(m, b)
}
func (m *FieldTestMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldTestMessage.Marshal(b, m, deterministic)
}
func (m *FieldTestMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldTestMessage.Merge(m, src)
}
func (m *FieldTestMessage) XXX_Size() int {
	return xxx_messageInfo_FieldTestMessage.Size(m)
}
func (m *FieldTestMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldTestMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FieldTestMessage proto.InternalMessageInfo

func (m *FieldTestMessage) GetOptionalBool() bool {
	if m != nil {
		return m.OptionalBool
	}
	return false
}

func (m *FieldTestMessage) GetOptionalEnum() FieldTestMessage_Enum {
	if m != nil {
		return m.OptionalEnum
	}
	return FieldTestMessage_ZERO
}

func (m *FieldTestMessage) GetOptionalInt32() int32 {
	if m != nil {
		return m.OptionalInt32
	}
	return 0
}

func (m *FieldTestMessage) GetOptionalSint32() int32 {
	if m != nil {
		return m.OptionalSint32
	}
	return 0
}

func (m *FieldTestMessage) GetOptionalUint32() uint32 {
	if m != nil {
		return m.OptionalUint32
	}
	return 0
}

func (m *FieldTestMessage) GetOptionalInt64() int64 {
	if m != nil {
		return m.OptionalInt64
	}
	return 0
}

func (m *FieldTestMessage) GetOptionalSint64() int64 {
	if m != nil {
		return m.OptionalSint64
	}
	return 0
}

func (m *FieldTestMessage) GetOptionalUint64() uint64 {
	if m != nil {
		return m.OptionalUint64
	}
	return 0
}

func (m *FieldTestMessage) GetOptionalSfixed32() int32 {
	if m != nil {
		return m.OptionalSfixed32
	}
	return 0
}

func (m *FieldTestMessage) GetOptionalFixed32() uint32 {
	if m != nil {
		return m.OptionalFixed32
	}
	return 0
}

func (m *FieldTestMessage) GetOptionalFloat() float32 {
	if m != nil {
		return m.OptionalFloat
	}
	return 0
}

func (m *FieldTestMessage) GetOptionalSfixed64() int64 {
	if m != nil {
		return m.OptionalSfixed64
	}
	return 0
}

func (m *FieldTestMessage) GetOptionalFixed64() uint64 {
	if m != nil {
		return m.OptionalFixed64
	}
	return 0
}

func (m *FieldTestMessage) GetOptionalDouble() float64 {
	if m != nil {
		return m.OptionalDouble
	}
	return 0
}

func (m *FieldTestMessage) GetOptionalString() string {
	if m != nil {
		return m.OptionalString
	}
	return ""
}

func (m *FieldTestMessage) GetOptionalBytes() []byte {
	if m != nil {
		return m.OptionalBytes
	}
	return nil
}

func (m *FieldTestMessage) GetOptional_Message() *FieldTestMessage_Message {
	if m != nil {
		return m.Optional_Message
	}
	return nil
}

func (m *FieldTestMessage) GetOptional_Message2() *FieldTestMessage_Message2 {
	if m != nil {
		return m.Optional_Message2
	}
	return nil
}

func (m *FieldTestMessage) GetRepeatedBool() []bool {
	if m != nil {
		return m.RepeatedBool
	}
	return nil
}

func (m *FieldTestMessage) GetRepeatedEnum() []FieldTestMessage_Enum {
	if m != nil {
		return m.RepeatedEnum
	}
	return nil
}

func (m *FieldTestMessage) GetRepeatedInt32() []int32 {
	if m != nil {
		return m.RepeatedInt32
	}
	return nil
}

func (m *FieldTestMessage) GetRepeatedSint32() []int32 {
	if m != nil {
		return m.RepeatedSint32
	}
	return nil
}

func (m *FieldTestMessage) GetRepeatedUint32() []uint32 {
	if m != nil {
		return m.RepeatedUint32
	}
	return nil
}

func (m *FieldTestMessage) GetRepeatedInt64() []int64 {
	if m != nil {
		return m.RepeatedInt64
	}
	return nil
}

func (m *FieldTestMessage) GetRepeatedSint64() []int64 {
	if m != nil {
		return m.RepeatedSint64
	}
	return nil
}

func (m *FieldTestMessage) GetRepeatedUint64() []uint64 {
	if m != nil {
		return m.RepeatedUint64
	}
	return nil
}

func (m *FieldTestMessage) GetRepeatedSfixed32() []int32 {
	if m != nil {
		return m.RepeatedSfixed32
	}
	return nil
}

func (m *FieldTestMessage) GetRepeatedFixed32() []uint32 {
	if m != nil {
		return m.RepeatedFixed32
	}
	return nil
}

func (m *FieldTestMessage) GetRepeatedFloat() []float32 {
	if m != nil {
		return m.RepeatedFloat
	}
	return nil
}

func (m *FieldTestMessage) GetRepeatedSfixed64() []int64 {
	if m != nil {
		return m.RepeatedSfixed64
	}
	return nil
}

func (m *FieldTestMessage) GetRepeatedFixed64() []uint64 {
	if m != nil {
		return m.RepeatedFixed64
	}
	return nil
}

func (m *FieldTestMessage) GetRepeatedDouble() []float64 {
	if m != nil {
		return m.RepeatedDouble
	}
	return nil
}

func (m *FieldTestMessage) GetRepeatedString() []string {
	if m != nil {
		return m.RepeatedString
	}
	return nil
}

func (m *FieldTestMessage) GetRepeatedBytes() [][]byte {
	if m != nil {
		return m.RepeatedBytes
	}
	return nil
}

func (m *FieldTestMessage) GetRepeated_Message() []*FieldTestMessage_Message {
	if m != nil {
		return m.Repeated_Message
	}
	return nil
}

func (m *FieldTestMessage) GetRepeated_Message2() []*FieldTestMessage_Message2 {
	if m != nil {
		return m.Repeated_Message2
	}
	return nil
}

func (m *FieldTestMessage) GetMapBool() map[int32]bool {
	if m != nil {
		return m.MapBool
	}
	return nil
}

func (m *FieldTestMessage) GetMapEnum() map[int32]FieldTestMessage_Enum {
	if m != nil {
		return m.MapEnum
	}
	return nil
}

func (m *FieldTestMessage) GetMapInt32() map[int32]int32 {
	if m != nil {
		return m.MapInt32
	}
	return nil
}

func (m *FieldTestMessage) GetMapSint32() map[int32]int32 {
	if m != nil {
		return m.MapSint32
	}
	return nil
}

func (m *FieldTestMessage) GetMapUint32() map[uint32]uint32 {
	if m != nil {
		return m.MapUint32
	}
	return nil
}

func (m *FieldTestMessage) GetMapInt64() map[int64]int64 {
	if m != nil {
		return m.MapInt64
	}
	return nil
}

func (m *FieldTestMessage) GetMapSint64() map[int64]int64 {
	if m != nil {
		return m.MapSint64
	}
	return nil
}

func (m *FieldTestMessage) GetMapUint64() map[uint64]uint64 {
	if m != nil {
		return m.MapUint64
	}
	return nil
}

func (m *FieldTestMessage) GetMapSfixed32() map[int32]int32 {
	if m != nil {
		return m.MapSfixed32
	}
	return nil
}

func (m *FieldTestMessage) GetMapFixed32() map[uint32]uint32 {
	if m != nil {
		return m.MapFixed32
	}
	return nil
}

func (m *FieldTestMessage) GetMapFloat() map[int32]float32 {
	if m != nil {
		return m.MapFloat
	}
	return nil
}

func (m *FieldTestMessage) GetMapSfixed64() map[int32]int64 {
	if m != nil {
		return m.MapSfixed64
	}
	return nil
}

func (m *FieldTestMessage) GetMapFixed64() map[int32]uint64 {
	if m != nil {
		return m.MapFixed64
	}
	return nil
}

func (m *FieldTestMessage) GetMapDouble() map[int32]float64 {
	if m != nil {
		return m.MapDouble
	}
	return nil
}

func (m *FieldTestMessage) GetMapString() map[int32]string {
	if m != nil {
		return m.MapString
	}
	return nil
}

func (m *FieldTestMessage) GetMapBytes() map[int32][]byte {
	if m != nil {
		return m.MapBytes
	}
	return nil
}

func (m *FieldTestMessage) GetMap_Message() map[int32]*FieldTestMessage_Message {
	if m != nil {
		return m.Map_Message
	}
	return nil
}

func (m *FieldTestMessage) GetMap_Message2() map[int32]*FieldTestMessage_Message2 {
	if m != nil {
		return m.Map_Message2
	}
	return nil
}

func (m *FieldTestMessage) GetMapKeyInt32() map[int32]int32 {
	if m != nil {
		return m.MapKeyInt32
	}
	return nil
}

func (m *FieldTestMessage) GetMapKeySint32() map[int32]int32 {
	if m != nil {
		return m.MapKeySint32
	}
	return nil
}

func (m *FieldTestMessage) GetMapKeyUint32() map[uint32]int32 {
	if m != nil {
		return m.MapKeyUint32
	}
	return nil
}

func (m *FieldTestMessage) GetMapKeyInt64() map[int64]int32 {
	if m != nil {
		return m.MapKeyInt64
	}
	return nil
}

func (m *FieldTestMessage) GetMapKeySint64() map[int64]int32 {
	if m != nil {
		return m.MapKeySint64
	}
	return nil
}

func (m *FieldTestMessage) GetMapKeyUint64() map[uint64]int32 {
	if m != nil {
		return m.MapKeyUint64
	}
	return nil
}

func (m *FieldTestMessage) GetMapKeySfixed32() map[int32]int32 {
	if m != nil {
		return m.MapKeySfixed32
	}
	return nil
}

func (m *FieldTestMessage) GetMapKeyFixed32() map[uint32]int32 {
	if m != nil {
		return m.MapKeyFixed32
	}
	return nil
}

func (m *FieldTestMessage) GetMapKeySfixed64() map[int64]int32 {
	if m != nil {
		return m.MapKeySfixed64
	}
	return nil
}

func (m *FieldTestMessage) GetMapKeyFixed64() map[uint64]int32 {
	if m != nil {
		return m.MapKeyFixed64
	}
	return nil
}

func (m *FieldTestMessage) GetMapKeyString() map[string]int32 {
	if m != nil {
		return m.MapKeyString
	}
	return nil
}

func (m *FieldTestMessage) GetMapInt32Int64() map[int32]int64 {
	if m != nil {
		return m.MapInt32Int64
	}
	return nil
}

func (m *FieldTestMessage) GetMapStringMessage() map[string]*FieldTestMessage_Message {
	if m != nil {
		return m.MapStringMessage
	}
	return nil
}

func (m *FieldTestMessage) GetMapStringMessage2() map[string]*FieldTestMessage_Message2 {
	if m != nil {
		return m.MapStringMessage2
	}
	return nil
}

func (m *FieldTestMessage) GetMapFixed64Enum() map[uint64]FieldTestMessage_Enum {
	if m != nil {
		return m.MapFixed64Enum
	}
	return nil
}

type FieldTestMessage_Message struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldTestMessage_Message) Reset()         { *m = FieldTestMessage_Message{} }
func (m *FieldTestMessage_Message) String() string { return proto.CompactTextString(m) }
func (*FieldTestMessage_Message) ProtoMessage()    {}
func (*FieldTestMessage_Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_d39ad626ec0e575e, []int{0, 33}
}
func (m *FieldTestMessage_Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldTestMessage_Message.Unmarshal(m, b)
}
func (m *FieldTestMessage_Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldTestMessage_Message.Marshal(b, m, deterministic)
}
func (m *FieldTestMessage_Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldTestMessage_Message.Merge(m, src)
}
func (m *FieldTestMessage_Message) XXX_Size() int {
	return xxx_messageInfo_FieldTestMessage_Message.Size(m)
}
func (m *FieldTestMessage_Message) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldTestMessage_Message.DiscardUnknown(m)
}

var xxx_messageInfo_FieldTestMessage_Message proto.InternalMessageInfo

type FieldTestMessage_Message2 struct {
	Bool                 bool                  `protobuf:"varint,1,opt,name=bool,proto3" json:"bool,omitempty"`
	Enum                 FieldTestMessage_Enum `protobuf:"varint,2,opt,name=enum,proto3,enum=goproto.protoc.proto3.FieldTestMessage_Enum" json:"enum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FieldTestMessage_Message2) Reset()         { *m = FieldTestMessage_Message2{} }
func (m *FieldTestMessage_Message2) String() string { return proto.CompactTextString(m) }
func (*FieldTestMessage_Message2) ProtoMessage()    {}
func (*FieldTestMessage_Message2) Descriptor() ([]byte, []int) {
	return fileDescriptor_d39ad626ec0e575e, []int{0, 34}
}
func (m *FieldTestMessage_Message2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldTestMessage_Message2.Unmarshal(m, b)
}
func (m *FieldTestMessage_Message2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldTestMessage_Message2.Marshal(b, m, deterministic)
}
func (m *FieldTestMessage_Message2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldTestMessage_Message2.Merge(m, src)
}
func (m *FieldTestMessage_Message2) XXX_Size() int {
	return xxx_messageInfo_FieldTestMessage_Message2.Size(m)
}
func (m *FieldTestMessage_Message2) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldTestMessage_Message2.DiscardUnknown(m)
}

var xxx_messageInfo_FieldTestMessage_Message2 proto.InternalMessageInfo

func (m *FieldTestMessage_Message2) GetBool() bool {
	if m != nil {
		return m.Bool
	}
	return false
}

func (m *FieldTestMessage_Message2) GetEnum() FieldTestMessage_Enum {
	if m != nil {
		return m.Enum
	}
	return FieldTestMessage_ZERO
}

func init() {
	proto.RegisterEnum("goproto.protoc.proto3.Enum", Enum_name, Enum_value)
	proto.RegisterEnum("goproto.protoc.proto3.FieldTestMessage_Enum", FieldTestMessage_Enum_name, FieldTestMessage_Enum_value)
	proto.RegisterType((*FieldTestMessage)(nil), "goproto.protoc.proto3.FieldTestMessage")
	proto.RegisterMapType((map[int32]bool)(nil), "goproto.protoc.proto3.FieldTestMessage.MapBoolEntry")
	proto.RegisterMapType((map[int32][]byte)(nil), "goproto.protoc.proto3.FieldTestMessage.MapBytesEntry")
	proto.RegisterMapType((map[int32]float64)(nil), "goproto.protoc.proto3.FieldTestMessage.MapDoubleEntry")
	proto.RegisterMapType((map[int32]FieldTestMessage_Enum)(nil), "goproto.protoc.proto3.FieldTestMessage.MapEnumEntry")
	proto.RegisterMapType((map[uint32]uint32)(nil), "goproto.protoc.proto3.FieldTestMessage.MapFixed32Entry")
	proto.RegisterMapType((map[int32]uint64)(nil), "goproto.protoc.proto3.FieldTestMessage.MapFixed64Entry")
	proto.RegisterMapType((map[uint64]FieldTestMessage_Enum)(nil), "goproto.protoc.proto3.FieldTestMessage.MapFixed64EnumEntry")
	proto.RegisterMapType((map[int32]float32)(nil), "goproto.protoc.proto3.FieldTestMessage.MapFloatEntry")
	proto.RegisterMapType((map[int32]int32)(nil), "goproto.protoc.proto3.FieldTestMessage.MapInt32Entry")
	proto.RegisterMapType((map[int32]int64)(nil), "goproto.protoc.proto3.FieldTestMessage.MapInt32Int64Entry")
	proto.RegisterMapType((map[int64]int64)(nil), "goproto.protoc.proto3.FieldTestMessage.MapInt64Entry")
	proto.RegisterMapType((map[uint32]int32)(nil), "goproto.protoc.proto3.FieldTestMessage.MapKeyFixed32Entry")
	proto.RegisterMapType((map[uint64]int32)(nil), "goproto.protoc.proto3.FieldTestMessage.MapKeyFixed64Entry")
	proto.RegisterMapType((map[int32]int32)(nil), "goproto.protoc.proto3.FieldTestMessage.MapKeyInt32Entry")
	proto.RegisterMapType((map[int64]int32)(nil), "goproto.protoc.proto3.FieldTestMessage.MapKeyInt64Entry")
	proto.RegisterMapType((map[int32]int32)(nil), "goproto.protoc.proto3.FieldTestMessage.MapKeySfixed32Entry")
	proto.RegisterMapType((map[int64]int32)(nil), "goproto.protoc.proto3.FieldTestMessage.MapKeySfixed64Entry")
	proto.RegisterMapType((map[int32]int32)(nil), "goproto.protoc.proto3.FieldTestMessage.MapKeySint32Entry")
	proto.RegisterMapType((map[int64]int32)(nil), "goproto.protoc.proto3.FieldTestMessage.MapKeySint64Entry")
	proto.RegisterMapType((map[string]int32)(nil), "goproto.protoc.proto3.FieldTestMessage.MapKeyStringEntry")
	proto.RegisterMapType((map[uint32]int32)(nil), "goproto.protoc.proto3.FieldTestMessage.MapKeyUint32Entry")
	proto.RegisterMapType((map[uint64]int32)(nil), "goproto.protoc.proto3.FieldTestMessage.MapKeyUint64Entry")
	proto.RegisterMapType((map[int32]*FieldTestMessage_Message2)(nil), "goproto.protoc.proto3.FieldTestMessage.MapMessage2Entry")
	proto.RegisterMapType((map[int32]*FieldTestMessage_Message)(nil), "goproto.protoc.proto3.FieldTestMessage.MapMessageEntry")
	proto.RegisterMapType((map[int32]int32)(nil), "goproto.protoc.proto3.FieldTestMessage.MapSfixed32Entry")
	proto.RegisterMapType((map[int32]int64)(nil), "goproto.protoc.proto3.FieldTestMessage.MapSfixed64Entry")
	proto.RegisterMapType((map[int32]int32)(nil), "goproto.protoc.proto3.FieldTestMessage.MapSint32Entry")
	proto.RegisterMapType((map[int64]int64)(nil), "goproto.protoc.proto3.FieldTestMessage.MapSint64Entry")
	proto.RegisterMapType((map[int32]string)(nil), "goproto.protoc.proto3.FieldTestMessage.MapStringEntry")
	proto.RegisterMapType((map[string]*FieldTestMessage_Message2)(nil), "goproto.protoc.proto3.FieldTestMessage.MapStringMessage2Entry")
	proto.RegisterMapType((map[string]*FieldTestMessage_Message)(nil), "goproto.protoc.proto3.FieldTestMessage.MapStringMessageEntry")
	proto.RegisterMapType((map[uint32]uint32)(nil), "goproto.protoc.proto3.FieldTestMessage.MapUint32Entry")
	proto.RegisterMapType((map[uint64]uint64)(nil), "goproto.protoc.proto3.FieldTestMessage.MapUint64Entry")
	proto.RegisterType((*FieldTestMessage_Message)(nil), "goproto.protoc.proto3.FieldTestMessage.Message")
	proto.RegisterType((*FieldTestMessage_Message2)(nil), "goproto.protoc.proto3.FieldTestMessage.Message2")
}

func init() { proto.RegisterFile("fields.proto", fileDescriptor_d39ad626ec0e575e) }

var fileDescriptor_d39ad626ec0e575e = []byte{
	// 1587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0x59, 0x73, 0x1b, 0x45,
	0x17, 0xfd, 0x46, 0x8b, 0x25, 0x75, 0xb4, 0x8c, 0x3a, 0x5f, 0xa8, 0xae, 0x3c, 0x4d, 0x85, 0x6d,
	0x08, 0x29, 0x87, 0x52, 0x9a, 0x26, 0x38, 0x24, 0x04, 0x17, 0x76, 0x15, 0x45, 0x41, 0x60, 0x12,
	0x43, 0x11, 0x08, 0x89, 0x1c, 0x8f, 0x83, 0x2b, 0x92, 0xc6, 0x65, 0xcb, 0x29, 0xfc, 0x3b, 0xd8,
	0x29, 0x96, 0x5f, 0xc0, 0xbe, 0xaf, 0xef, 0xec, 0xfb, 0xfa, 0x3b, 0x58, 0x5e, 0xa9, 0xde, 0xa6,
	0xbb, 0x67, 0xda, 0x48, 0x3d, 0xf8, 0x49, 0x52, 0xe7, 0xde, 0x73, 0xfa, 0xde, 0xbe, 0xe7, 0x4c,
	0x67, 0x0c, 0x9a, 0xab, 0x6b, 0xf1, 0x60, 0x65, 0x73, 0x76, 0x7d, 0x23, 0x19, 0x27, 0x70, 0xdf,
	0xa5, 0x84, 0x7d, 0xe1, 0x3f, 0x2f, 0xf2, 0x8f, 0x23, 0x07, 0x5e, 0x9a, 0x03, 0xfe, 0x22, 0x8d,
	0x3b, 0x13, 0x6f, 0x8e, 0xef, 0x89, 0x37, 0x37, 0xfb, 0x97, 0x62, 0x78, 0x35, 0x68, 0x25, 0xeb,
	0xe3, 0xb5, 0x64, 0xd4, 0x1f, 0x9c, 0x5f, 0x4e, 0x92, 0x01, 0xf2, 0x02, 0x2f, 0xac, 0x47, 0x4d,
	0xb9, 0x38, 0x9f, 0x24, 0x03, 0x78, 0xbf, 0x16, 0x14, 0x8f, 0xb6, 0x86, 0xa8, 0x14, 0x78, 0x61,
	0xbb, 0x77, 0x68, 0xd6, 0x4a, 0x34, 0x9b, 0x25, 0x99, 0x5d, 0x18, 0x6d, 0x0d, 0x15, 0x24, 0xfd,
	0x05, 0xaf, 0x05, 0xed, 0x14, 0x72, 0x6d, 0x34, 0x3e, 0xd2, 0x43, 0xe5, 0xc0, 0x0b, 0xab, 0x51,
	0x4a, 0x74, 0x17, 0x5d, 0x84, 0xd7, 0x83, 0x4e, 0x1a, 0xb6, 0xc9, 0xe3, 0x2a, 0x81, 0x17, 0x76,
	0xa3, 0x34, 0xfb, 0xf4, 0x5a, 0x2e, 0x70, 0x8b, 0x07, 0x56, 0x03, 0x2f, 0x6c, 0xa9, 0xc0, 0x25,
	0x1e, 0x98, 0x21, 0x26, 0x18, 0xcd, 0x04, 0x5e, 0x58, 0x36, 0x88, 0x09, 0xce, 0x11, 0x13, 0x8c,
	0x6a, 0x81, 0x17, 0x42, 0x93, 0x38, 0x13, 0xb8, 0xc5, 0x03, 0xeb, 0x81, 0x17, 0x56, 0x4c, 0x62,
	0x82, 0xe1, 0x8d, 0xa0, 0xab, 0x10, 0x57, 0xd7, 0x1e, 0x8f, 0x57, 0x8e, 0xf4, 0x50, 0x23, 0xf0,
	0xc2, 0x4e, 0xe4, 0xa7, 0x98, 0x62, 0x1d, 0xde, 0x00, 0xd2, 0xb5, 0xf3, 0x32, 0x16, 0x04, 0x5e,
	0x58, 0x8b, 0x52, 0xb6, 0x45, 0x11, 0xaa, 0x17, 0xb4, 0x3a, 0x48, 0xfa, 0x63, 0xb4, 0x27, 0xf0,
	0xc2, 0x92, 0x2a, 0x68, 0x91, 0x2e, 0x5a, 0xe8, 0x09, 0x46, 0xcd, 0xc0, 0x0b, 0xfd, 0x2c, 0x3d,
	0xc1, 0x79, 0x7a, 0x82, 0x51, 0x2b, 0xf0, 0xc2, 0x99, 0x0c, 0x7d, 0xa6, 0xfe, 0x95, 0x64, 0x6b,
	0x79, 0x10, 0xa3, 0x76, 0xe0, 0x85, 0x9e, 0xaa, 0xff, 0x4e, 0xb6, 0x6a, 0x76, 0x74, 0xbc, 0xb1,
	0x36, 0xba, 0x84, 0x3a, 0x81, 0x17, 0x36, 0xb4, 0x8e, 0xb2, 0x55, 0xa3, 0xa0, 0xe5, 0xed, 0x71,
	0xbc, 0x89, 0xfc, 0xc0, 0x0b, 0x9b, 0xaa, 0xa0, 0x79, 0xba, 0x08, 0xcf, 0x6a, 0x7b, 0x14, 0x83,
	0x86, 0xba, 0x81, 0x17, 0xee, 0xe9, 0x1d, 0x9e, 0x76, 0x2e, 0xc5, 0xa7, 0x2a, 0x4a, 0xaa, 0xe2,
	0x9c, 0xd6, 0x2c, 0xb1, 0xd6, 0x43, 0x90, 0x81, 0xdf, 0xe4, 0x08, 0xde, 0x53, 0xed, 0x95, 0x2b,
	0xf0, 0x1a, 0xd0, 0xda, 0x88, 0xd7, 0xe3, 0xfe, 0x38, 0x5e, 0xe1, 0xa2, 0xfb, 0xcc, 0x0b, 0xca,
	0x54, 0x75, 0x72, 0x95, 0xa9, 0x2e, 0xd2, 0xa2, 0x98, 0xea, 0x3e, 0xa7, 0x51, 0xce, 0xb2, 0x93,
	0x18, 0x4c, 0x76, 0xd7, 0x81, 0x76, 0x8a, 0xc9, 0x55, 0xf2, 0x05, 0x05, 0xad, 0x46, 0x29, 0x15,
	0xd7, 0x5d, 0x08, 0x3a, 0x69, 0x9c, 0xd0, 0xdd, 0x97, 0x34, 0xb0, 0x1b, 0xa5, 0xf9, 0x42, 0x78,
	0x7a, 0xa4, 0x10, 0xde, 0x57, 0x34, 0xb2, 0xa5, 0x22, 0x85, 0xf2, 0x32, 0xdc, 0x04, 0xa3, 0xaf,
	0x69, 0x60, 0xd9, 0xe0, 0x26, 0x38, 0xc7, 0x4d, 0x30, 0xfa, 0x86, 0x06, 0x42, 0x93, 0x3b, 0x13,
	0x29, 0xb4, 0xf7, 0x2d, 0x8d, 0xac, 0x98, 0xdc, 0x04, 0xc3, 0x43, 0xa0, 0xab, 0x30, 0xa5, 0xa0,
	0xbe, 0xa3, 0xb1, 0x9d, 0xc8, 0x4f, 0x51, 0xa5, 0xfa, 0x0e, 0x82, 0x74, 0x2d, 0x55, 0xdf, 0xf7,
	0x34, 0xb8, 0x16, 0xa5, 0x84, 0x52, 0x7e, 0x7a, 0x55, 0x5c, 0x7e, 0x3f, 0xd0, 0xc8, 0x92, 0xaa,
	0x8a, 0xeb, 0x2f, 0xbf, 0x03, 0x82, 0xd1, 0x8f, 0x34, 0xd4, 0xcf, 0xee, 0x80, 0xe0, 0xfc, 0x0e,
	0x08, 0x46, 0x3f, 0xd1, 0xe0, 0x99, 0xcc, 0x0e, 0x32, 0x5d, 0x10, 0x0a, 0xfc, 0x99, 0x86, 0x7a,
	0xaa, 0x0b, 0x42, 0x82, 0x46, 0x67, 0xb9, 0x04, 0x7f, 0xa1, 0x91, 0x0d, 0xad, 0xb3, 0x5c, 0x83,
	0x7a, 0x55, 0x5c, 0x83, 0xbf, 0xd2, 0xc0, 0xa6, 0xaa, 0x8a, 0x8b, 0xf0, 0x61, 0x6d, 0x9f, 0x52,
	0x84, 0xbf, 0xd1, 0xc8, 0x22, 0x2a, 0x94, 0x48, 0x52, 0x85, 0x8f, 0x6a, 0x2d, 0x4b, 0x55, 0xf8,
	0x3b, 0x47, 0x2f, 0x20, 0xc3, 0x0c, 0x7c, 0x0f, 0xde, 0x07, 0xea, 0xc3, 0xfe, 0x3a, 0x57, 0xe0,
	0x2b, 0x25, 0x06, 0x8b, 0xa7, 0x86, 0xed, 0xaf, 0x53, 0x91, 0x2e, 0x8c, 0xc6, 0x1b, 0xdb, 0x51,
	0x6d, 0xc8, 0x7f, 0x49, 0x44, 0xa6, 0xd6, 0x57, 0xdd, 0x11, 0xa9, 0x44, 0x15, 0x22, 0x13, 0xec,
	0x69, 0xd0, 0xa0, 0x88, 0x5c, 0x58, 0xaf, 0x71, 0xc8, 0x9b, 0x1d, 0x20, 0x99, 0x9c, 0x39, 0x26,
	0xdd, 0x1a, 0x57, 0xf7, 0x03, 0x00, 0x50, 0x50, 0x21, 0xec, 0xd7, 0x39, 0x2a, 0x71, 0x40, 0xe5,
	0xda, 0xe7, 0xb0, 0x74, 0x7f, 0xc2, 0x0b, 0x04, 0xae, 0xb0, 0x81, 0x37, 0xdc, 0x71, 0x97, 0x32,
	0xb8, 0xc2, 0x39, 0x54, 0x13, 0x08, 0x46, 0x6f, 0x16, 0x6a, 0x02, 0xc1, 0x46, 0x13, 0x08, 0xd6,
	0x9b, 0x40, 0x30, 0x7a, 0xab, 0x58, 0x13, 0x24, 0xac, 0x6c, 0x82, 0xc2, 0x15, 0x7e, 0xf4, 0x76,
	0xb1, 0x26, 0xe8, 0xb8, 0xc2, 0xc2, 0x1e, 0x01, 0x4d, 0xb6, 0x5f, 0x69, 0x48, 0xef, 0x70, 0xe4,
	0xa3, 0x2e, 0x3b, 0x16, 0xb9, 0x1c, 0x7b, 0xcf, 0x50, 0xad, 0xc0, 0x87, 0x00, 0xfd, 0x99, 0xba,
	0xdd, 0xbb, 0x1c, 0xfc, 0x16, 0x07, 0xf0, 0x45, 0x1d, 0x9b, 0xb6, 0x40, 0x3a, 0xa4, 0x38, 0x3d,
	0x6e, 0x8e, 0xef, 0xb9, 0x9f, 0x1e, 0xf3, 0x4f, 0x75, 0x7a, 0xdc, 0x4e, 0x8d, 0x6e, 0x10, 0x8c,
	0xde, 0x2f, 0xda, 0x0d, 0xd9, 0x69, 0xd5, 0x0d, 0x82, 0x8d, 0x6e, 0x10, 0x8c, 0x3e, 0x28, 0xd8,
	0x0d, 0x89, 0x9d, 0x76, 0x43, 0x8d, 0x87, 0x30, 0xea, 0x0f, 0xdd, 0xc7, 0x83, 0x7b, 0xb9, 0x1a,
	0x0f, 0xe1, 0xed, 0x72, 0x9c, 0xb9, 0xad, 0x7f, 0x54, 0x60, 0x9c, 0x59, 0xa6, 0x36, 0xce, 0xfc,
	0x49, 0x20, 0x4e, 0x8f, 0x3f, 0x04, 0x3e, 0x76, 0x3f, 0x3d, 0xf6, 0x9c, 0x50, 0xa7, 0xc7, 0x1f,
	0x1b, 0xa2, 0xbf, 0xf2, 0x89, 0xf1, 0x89, 0x7b, 0x7f, 0xc5, 0x57, 0xd5, 0x5f, 0xf9, 0xd0, 0x10,
	0x83, 0x91, 0x3e, 0x2f, 0x3e, 0x75, 0x1f, 0x0c, 0x99, 0xab, 0x06, 0x23, 0x7d, 0x64, 0x9c, 0x03,
	0x2d, 0x8a, 0x7e, 0x39, 0xde, 0x16, 0x96, 0xfc, 0x44, 0xd9, 0x19, 0xfe, 0xee, 0x78, 0x5b, 0x73,
	0x65, 0x0a, 0x2f, 0x57, 0xe0, 0x05, 0xd0, 0x96, 0xf0, 0xc2, 0x9c, 0x9f, 0xe4, 0xf8, 0xb7, 0xba,
	0xe1, 0xeb, 0xfe, 0xdc, 0x1c, 0x6a, 0x4b, 0x3a, 0x83, 0xb0, 0xe9, 0xa7, 0x0a, 0x31, 0x2c, 0xe5,
	0x19, 0x84, 0x59, 0x9b, 0x2d, 0x22, 0x18, 0x3d, 0x5d, 0xb4, 0x45, 0xba, 0x34, 0xe5, 0x4a, 0xb6,
	0x45, 0x04, 0xa3, 0x67, 0x0a, 0xb7, 0x48, 0x12, 0x68, 0x2d, 0x32, 0x19, 0x84, 0x89, 0x3f, 0x5b,
	0xb8, 0x45, 0x19, 0x06, 0x61, 0xe5, 0xab, 0xc0, 0x4f, 0x6b, 0x90, 0x8e, 0xfb, 0x1c, 0xe7, 0x38,
	0xe6, 0x58, 0x85, 0xe1, 0xe8, 0xed, 0xa1, 0xb1, 0x08, 0x2f, 0x82, 0x8e, 0xe4, 0x91, 0x34, 0xcf,
	0x73, 0x9a, 0x39, 0x37, 0x1a, 0xc3, 0xdb, 0x5b, 0x43, 0x7d, 0x2d, 0x5f, 0x0c, 0xc1, 0xe8, 0x85,
	0xff, 0x50, 0x8c, 0x6c, 0x99, 0x51, 0x0c, 0xc1, 0xb9, 0x62, 0x08, 0x46, 0x2f, 0x16, 0x2f, 0x46,
	0xb2, 0xe8, 0xc5, 0x64, 0xa6, 0x8b, 0x3b, 0xe9, 0xcb, 0xc5, 0xa6, 0x4b, 0x33, 0x53, 0x39, 0x5d,
	0xdc, 0x4f, 0x45, 0x19, 0x4c, 0x2b, 0x42, 0x20, 0x7f, 0xb8, 0x97, 0xc1, 0xec, 0x42, 0x93, 0x48,
	0x6b, 0xa8, 0xaf, 0xc1, 0x01, 0x80, 0xea, 0x61, 0x70, 0x7e, 0x28, 0x6c, 0xf6, 0x4f, 0xce, 0x73,
	0xdc, 0xf9, 0xa1, 0x60, 0x98, 0xad, 0x3f, 0xcc, 0x2c, 0xc3, 0x04, 0xec, 0xcd, 0xb3, 0xf5, 0xd0,
	0x5f, 0x9c, 0xee, 0x44, 0x51, 0x3a, 0x31, 0x6e, 0xdd, 0x2c, 0x5f, 0x3a, 0x72, 0x62, 0x0c, 0xf8,
	0x75, 0xfb, 0x6f, 0xf7, 0x91, 0x4b, 0x07, 0x41, 0xde, 0xba, 0xdb, 0x43, 0x63, 0x71, 0xff, 0x1c,
	0x68, 0xea, 0xf7, 0x7c, 0xe8, 0x83, 0xf2, 0xe5, 0x78, 0x9b, 0xbd, 0x22, 0xab, 0x46, 0xf4, 0x2b,
	0xfc, 0x3f, 0xa8, 0x5e, 0xe9, 0x0f, 0xb6, 0x62, 0xf6, 0x46, 0xac, 0x1e, 0xf1, 0x1f, 0x73, 0xa5,
	0xa3, 0xde, 0xfe, 0xc7, 0x58, 0x6e, 0x8a, 0x6d, 0xc9, 0x9d, 0xd7, 0x73, 0x5d, 0xff, 0x5b, 0xaf,
	0x31, 0x1d, 0x03, 0x2d, 0xe3, 0xa2, 0x3f, 0x69, 0x9b, 0x55, 0x3d, 0xf9, 0x36, 0xd0, 0x36, 0xef,
	0xf3, 0x7a, 0x76, 0xd7, 0x92, 0xdd, 0xcd, 0x67, 0x2f, 0xd9, 0xb3, 0x5b, 0x96, 0xec, 0x96, 0x75,
	0xe3, 0x62, 0x8a, 0xf5, 0xe4, 0xb2, 0x25, 0xb9, 0x6c, 0xdf, 0xb8, 0x25, 0x1b, 0x5a, 0xb2, 0xa1,
	0x7d, 0xe3, 0x96, 0xec, 0x8a, 0x25, 0xbb, 0xa2, 0x67, 0x9f, 0x00, 0x7e, 0xf6, 0x36, 0xad, 0xe7,
	0x77, 0x2c, 0xf9, 0x1d, 0x3d, 0xff, 0x38, 0xe8, 0x64, 0x2e, 0xcc, 0x7a, 0x7a, 0xcd, 0x92, 0x5e,
	0xcb, 0xf7, 0x4d, 0x5d, 0x8b, 0x27, 0x1d, 0x78, 0x69, 0xa7, 0xbd, 0x5b, 0x6a, 0xb7, 0xe5, 0xfb,
	0x3b, 0xec, 0x7d, 0xca, 0xf4, 0x99, 0x7c, 0xe3, 0xb5, 0x3b, 0xec, 0xa4, 0x6c, 0xcf, 0x72, 0xe8,
	0xca, 0x5c, 0x27, 0x65, 0x37, 0xf2, 0x7d, 0x53, 0x17, 0xd2, 0x49, 0xc9, 0x4d, 0x3d, 0x79, 0xc4,
	0xea, 0xd6, 0x9d, 0xd0, 0x92, 0xbe, 0xa0, 0xa7, 0x17, 0x78, 0x05, 0xa2, 0xf1, 0xad, 0xb3, 0x73,
	0x32, 0xac, 0xd0, 0x42, 0xb8, 0x68, 0x12, 0xba, 0xbf, 0x15, 0xc9, 0x4d, 0x86, 0x71, 0x3b, 0x75,
	0xb2, 0x92, 0xdb, 0x41, 0x37, 0x77, 0xfb, 0x9c, 0xe4, 0x26, 0x76, 0x00, 0x07, 0x43, 0xa9, 0xee,
	0x54, 0xc1, 0x94, 0x9e, 0xb2, 0x73, 0x05, 0x53, 0xda, 0xca, 0xce, 0x15, 0x4c, 0xe9, 0x2c, 0x06,
	0xc0, 0x1d, 0x60, 0xaf, 0xe5, 0x62, 0x37, 0xc9, 0x5c, 0x0c, 0x88, 0x93, 0x00, 0xe6, 0x2f, 0x6d,
	0x93, 0xfc, 0xe5, 0xdf, 0x36, 0x61, 0xa9, 0xc3, 0x77, 0xdb, 0x84, 0x05, 0x61, 0x66, 0xfa, 0xb3,
	0xb0, 0xab, 0xbd, 0x31, 0xdd, 0x16, 0x32, 0x17, 0xa5, 0x49, 0x03, 0x6d, 0x3c, 0x62, 0xc6, 0x60,
	0x9f, 0xf5, 0x0a, 0x64, 0xd9, 0xc6, 0x2e, 0x0a, 0xff, 0x0a, 0xb8, 0xca, 0x7e, 0x13, 0xb2, 0xd0,
	0xee, 0xa6, 0xfc, 0x13, 0x76, 0xea, 0xd9, 0x3b, 0x91, 0xe5, 0xcc, 0x76, 0xeb, 0xde, 0xd2, 0x00,
	0x35, 0xf1, 0x4f, 0xfb, 0x2f, 0x80, 0x7a, 0x7a, 0xb9, 0x83, 0xa0, 0xa2, 0xfd, 0x21, 0x92, 0x7d,
	0x87, 0x27, 0x41, 0xa5, 0xf0, 0xdf, 0x1d, 0x59, 0xe6, 0x81, 0x03, 0xa0, 0xc2, 0xde, 0xa7, 0xd6,
	0x41, 0xe5, 0xec, 0x42, 0x74, 0xca, 0xff, 0x1f, 0xac, 0x81, 0xf2, 0xa9, 0x7b, 0x17, 0x7c, 0x8f,
	0x7e, 0x39, 0xf3, 0xe0, 0x29, 0xbf, 0x74, 0x70, 0x8a, 0x98, 0x79, 0x70, 0xb6, 0x3e, 0x7b, 0x98,
	0xf3, 0x2d, 0xcf, 0xf0, 0xcf, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xa3, 0x6a, 0x3f, 0x7e,
	0x1d, 0x00, 0x00,
}
